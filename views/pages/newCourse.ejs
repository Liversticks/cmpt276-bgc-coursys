<!DOCTYPE html>
<html>

<head>
    <%- include ('../partials/header.ejs') %>

</head>

<body>


  <%- include ('../partials/orgNav.ejs') %>

    <div class="container justify-content-center">
        <form id="courseForm" class="justify-content-around" method="POST" action="/courses/new"
            onsubmit="return validateForm()">
            <%- include ('../partials/courseForm.ejs') %>
        </form>
    </div>



</body>
<script>
    //handy materials
    let numSessions = 1;
    let sessionDiv = document.getElementById('session1').cloneNode(true);
    let newButton = document.getElementById('addSession');
    let removeButton = document.getElementById('removeSession');
    let outerSession = document.getElementById('outerSession');
    let sessionTracker = document.getElementById('sessionTracker');
    let deadline = document.getElementById('deadline');


    function validateForm() {
        //check that sessions do not overlap
        //check that sessions

        //check that numSessions matches hidden session tracker in form
        if (document.getElementById('sessionTracker').value != numSessions) {
          alert("Session tracker de-synced: refresh and try again");
          return false;
        }

        //check that capacity is positive
        if (document.getElementById('capacity').value < 0) {
          alert("Cannot have negative capacity");
          return false;
        }



        let dates = document.getElementsByClassName('date-wrapper');
        let starts = document.getElementsByClassName('start-wrapper');
        let ends = document.getElementsByClassName('end-wrapper');
        if (dates.length !== starts.length || dates.length !== ends.length || ends.length !== starts.length) {
          return false;
        }

        //time-related checks
        let previousStart = new Date(0);
        let previousEnd = new Date();
        let creationTime = new Date();

        //check that registration deadline is before the course begins
        //by default, 11:59 pm on the date specified (in the timezone of the server)
        let deadlineDate = new Date(deadline.value + ' ' + deadTime.value);
        let startTime = new Date(dates[0].lastElementChild.value + ' ' + starts[0].lastElementChild.value);
        if (startTime < deadlineDate) {
          alert("Cannot schedule registration deadline after the first course session.");
          return false;
        }

        for (let i = 0; i < dates.length; i++) {
          let startDateTime = new Date(dates[i].lastElementChild.value + ' ' + starts[i].lastElementChild.value);
          let endDateTime = new Date(dates[i].lastElementChild.value + ' ' + ends[i].lastElementChild.value);
          if (previousStart > startDateTime) {
            alert("Sessions should be scheduled in chronological order");
            return false;
          }
          if (creationTime > startDateTime) {
            alert("Cannot schedule courses in the past, unless you have magical time travel");
            return false;
          }
          if (previousEnd > startDateTime) {
            alert("Sessions should not overlap (previous session must end before next session starts)");
            return false;
          }
          if (startDateTime > endDateTime) {
              alert("End time of course must be after the start");
              return false;
          }
          previousStart = startDateTime;
          previousEnd = endDateTime;
        }
        return true;
    }
    //create new session
    function newSession() {
      //currently blank session is cloned
      //TODO: keep times, auto date interval?
      let newNode = sessionDiv.cloneNode(true);
      numSessions++;
      newNode.setAttribute('id', ('session' + numSessions));
      //change date attribute
      newNode.firstElementChild.firstElementChild.lastElementChild.setAttribute('id', ('sessionDate' + numSessions));
      newNode.firstElementChild.firstElementChild.lastElementChild.setAttribute('name', ('sessionDate' + numSessions));

      //change start time
      newNode.lastElementChild.firstElementChild.lastElementChild.setAttribute('id', ('startTime' + numSessions));
      newNode.lastElementChild.firstElementChild.lastElementChild.setAttribute('name', ('startTime' + numSessions));

      //change end time
      newNode.lastElementChild.lastElementChild.lastElementChild.setAttribute('id', ('endTime' + numSessions));
      newNode.lastElementChild.lastElementChild.lastElementChild.setAttribute('name', ('endTime' + numSessions));
      outerSession.appendChild(newNode);
      removeButton.removeAttribute('hidden');
      sessionTracker.setAttribute('value', numSessions);

    }

    //remove session
    function removeSession() {
      let targetDiv = document.getElementById('session' + numSessions);
      targetDiv.remove();
      numSessions--;
      if (numSessions < 2) {
        removeButton.setAttribute('hidden', '');
      }
      sessionTracker.setAttribute('value', numSessions);
    }

    //event listeners
    newButton.addEventListener('click', newSession);

    removeButton.addEventListener('click', removeSession);
</script>

</html>
